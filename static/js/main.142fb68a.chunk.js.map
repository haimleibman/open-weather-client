{"version":3,"sources":["serviceWorker.ts","app/common/store.ts","app/Autocomplete/Autocomplete.tsx","app/staticStore.ts","app/common/heatMap.ts","app/CurrentWeather/CurrentWeather.tsx","app/FavoriteCity/FavoriteCity.tsx","app/Favorites/Favorites.tsx","app/WeatherDetailsContainer/WeatherDetailsContainer.tsx","app/Layout/Layout.tsx","index.tsx","app/CurrentWeather/CurrentWeather.module.scss","app/FavoriteCity/FavoriteCity.module.scss","app/Layout/Layout.module.scss","app/WeatherDetailsContainer/WeatherDetailsContainer.module.scss","app/Autocomplete/Autocomplete.module.scss","app/Favorites/Favorites.module.scss"],"names":["Boolean","window","location","hostname","match","SelectedCity","atom","key","default","FavoriteCities","CustomAutocomplete","useState","open","setOpen","setSelectedCity","useSetRecoilState","Autocomplete","className","styles","autocomplete","onOpen","onClose","getOptionSelected","option","value","options","renderInput","params","TextField","label","variant","InputProps","WEATHER_URL_SUFFIX","getHeatColor","temperature","temp","CurrentWeather","presentCity","setPresentCity","city","useRecoilValue","useEffect","a","Axios","get","data","currentWeather","style","border","main","degree","toFixed","description","weather","DayWeather","props","favoriteCity","name","Forecasts","citiesDetails","setCitiesDetails","favoriteCities","detailsPromises","map","Promise","all","details","favorites","sort","b","i","FavoriteCity","WeatherDetailsContainer","useRecoilState","setFavorites","currentCity","container","favoritesButton","includes","Favorite","onClick","withoutCurrentCity","filter","_","FavoriteBorder","tempFavorites","newFavorites","length","shift","Layout","root","body","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.142fb68a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { atom } from 'recoil';\r\n\r\nexport const SelectedCity = atom<string>({\r\n  key: 'selectedCity',\r\n  default: 'Tel Aviv'\r\n});\r\n\r\nexport const FavoriteCities = atom<string[]>({\r\n  key: 'favorites',\r\n  default: []\r\n});","import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { SelectedCity } from '../common/store';\r\nimport styles from './Autocomplete.module.scss';\r\n\r\nexport default function CustomAutocomplete() {\r\n  const cities: string[] = [\r\n    'London', 'Tel Aviv', 'New York', 'Toronto', 'Jerusalem', 'Paris', 'Kopenhagen', 'Moscow', 'Los Angeles', 'Okinawa'\r\n  ];\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const setSelectedCity = useSetRecoilState(SelectedCity);\r\n\r\n  const getSelected = (option: string, value: string) => {\r\n    setSelectedCity(option);\r\n    return option === value;\r\n  }\r\n\r\n  return (\r\n    <Autocomplete\r\n      className={styles.autocomplete}\r\n      open={open}\r\n      onOpen={() => setOpen(true)}\r\n      onClose={() => setOpen(false)}\r\n      getOptionSelected={getSelected}\r\n      options={cities}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Search a city\"\r\n          variant=\"filled\"\r\n          InputProps={{\r\n            ...params.InputProps\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}","const WEATHER_API_KEY: string = 'apikey=85c010a40d2083b5672b97672f04d90b';\r\nexport const WEATHER_API_URL_BASE: string = \"https://api.openweathermap.org/data/2.5/weather?q=\";\r\nexport const WEATHER_URL_SUFFIX: string = `&units=metric&${WEATHER_API_KEY}`;\r\n","export const getHeatColor = (temperature: number): string => {\r\n    const max = 40;\r\n    const temp = temperature / max; // Range between 0 & 40.\r\n    const heatValue = temp < 0 ? 0\r\n                    : temp > 1 ? 1\r\n                    : temp;\r\n\r\n\r\n    return `3px solid hsl(${240 - heatValue * 240}, 100%, 50%)`;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { SelectedCity } from '../common/store';\r\nimport Axios from 'axios';\r\nimport { WEATHER_API_URL_BASE, WEATHER_URL_SUFFIX } from '../staticStore';\r\nimport { CityWeatherDetails } from '../models/cityWeatherDetails';\r\nimport styles from './CurrentWeather.module.scss';\r\nimport { getHeatColor } from '../common/heatMap';\r\n\r\nconst CurrentWeather = () => {\r\n    const [presentCity, setPresentCity] = useState<CityWeatherDetails>();\r\n    const city = useRecoilValue(SelectedCity);\r\n\r\n    useEffect((): void => {\r\n        (async () => {\r\n            const {data} = await Axios.get<CityWeatherDetails>(WEATHER_API_URL_BASE + city + WEATHER_URL_SUFFIX);\r\n            setPresentCity(data);\r\n        })()\r\n    }, [city])\r\n\r\n    return <div className={styles.currentWeather} style={{border: getHeatColor(presentCity?.main.temp ?? 0)}}>\r\n        <div className={styles.city}>{city}</div>\r\n        <div className={styles.degree}>{presentCity?.main.temp.toFixed()} c</div>\r\n        <div className={styles.description}>{presentCity?.weather[0].description}</div>\r\n    </div>\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport styles from './FavoriteCity.module.scss';\r\nimport { CityWeatherDetails } from '../models/cityWeatherDetails';\r\nimport { getHeatColor } from '../common/heatMap';\r\n\r\nconst DayWeather = (props: {city: CityWeatherDetails}) => {\r\n    const city = props.city;\r\n\r\n    return <div className={styles.favoriteCity} style={{border: getHeatColor(city?.main.temp ?? 0)}}>\r\n        <div className={styles.city}>{city?.name}</div>\r\n        <div className={styles.degree}>{city?.main.temp.toFixed()} c</div>\r\n        <div className={styles.description}>{city?.weather[0].main}</div>\r\n    </div>\r\n}\r\n\r\nexport default DayWeather;","import Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { FavoriteCities } from '../common/store';\r\nimport FavoriteCity from '../FavoriteCity/FavoriteCity';\r\nimport { CityWeatherDetails } from '../models/cityWeatherDetails';\r\nimport { WEATHER_API_URL_BASE, WEATHER_URL_SUFFIX } from '../staticStore';\r\nimport styles from './Favorites.module.scss';\r\n\r\nconst Forecasts = () => {\r\n    const [citiesDetails, setCitiesDetails] = useState<CityWeatherDetails[]>();\r\n    const favoriteCities = useRecoilValue(FavoriteCities);\r\n\r\n    useEffect((): void => {\r\n        (async () => {\r\n            const detailsPromises = favoriteCities.map(async city => {\r\n                const {data} = await Axios.get<CityWeatherDetails>(WEATHER_API_URL_BASE + city + WEATHER_URL_SUFFIX);\r\n                return data;\r\n            });\r\n\r\n            const details = await Promise.all(detailsPromises);\r\n            setCitiesDetails(details);\r\n        })();\r\n    }, [favoriteCities])\r\n\r\n    const byTemperature = (a: CityWeatherDetails, b: CityWeatherDetails): number => {\r\n        return a.main.temp > b.main.temp ? 1\r\n                : a.main.temp < b.main.temp ? -1\r\n                : 0;\r\n    }\r\n\r\n  return <div className={styles.favorites}>\r\n        {\r\n            citiesDetails?.sort(byTemperature).map((city: CityWeatherDetails, i: number) => {\r\n                return <FavoriteCity key={i} city={city} /> \r\n            })\r\n        }\r\n    </div> \r\n}\r\n\r\nexport default Forecasts;","import React from 'react';\r\nimport styles from './WeatherDetailsContainer.module.scss';\r\nimport CurrentWeather from '../CurrentWeather/CurrentWeather';\r\nimport Forecasts from '../Favorites/Favorites';\r\nimport { FavoriteBorder, Favorite } from '@material-ui/icons';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { FavoriteCities, SelectedCity } from '../common/store';\r\n\r\nexport const WeatherDetailsContainer = () => {\r\n    const [favorites, setFavorites] = useRecoilState(FavoriteCities);\r\n    const currentCity = useRecoilValue(SelectedCity);\r\n\r\n    const upsertFavorites = () => {\r\n        const tempFavorites: string[] = [...favorites, currentCity];\r\n        const newFavorites: string[] = favorites.length < 5 ? tempFavorites : (() => {\r\n            tempFavorites.shift();\r\n            return tempFavorites;\r\n        })();\r\n        setFavorites(newFavorites);\r\n    }\r\n\r\n    const deleteFromFavorites = () => {\r\n        const withoutCurrentCity = favorites.filter(_ => _ !== currentCity);\r\n        setFavorites(withoutCurrentCity);\r\n    }\r\n\r\n    return <div className={styles.container}>\r\n        <div className={styles.favoritesButton}>\r\n            {favorites.includes(currentCity) ? \r\n                <Favorite onClick={deleteFromFavorites}/>\r\n                : <FavoriteBorder onClick={upsertFavorites}/>\r\n            }\r\n        </div>\r\n        <CurrentWeather />\r\n        <Forecasts />\r\n    </div>\r\n};\r\n","import React from 'react';\r\nimport styles from './Layout.module.scss';\r\nimport AsyncAutocomplete from '../Autocomplete/Autocomplete';\r\nimport { WeatherDetailsContainer } from '../WeatherDetailsContainer/WeatherDetailsContainer';\r\n\r\nconst Layout = () => {\r\n    return <div className={styles.root}>\r\n                <div className={styles.body}>\r\n                    <AsyncAutocomplete/>\r\n                    <WeatherDetailsContainer/>\r\n                </div>\r\n            </div>\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Layout from './app/Layout/Layout';\r\nimport { RecoilRoot } from 'recoil';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <Layout />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentWeather\":\"CurrentWeather_currentWeather__3OgYI\",\"city\":\"CurrentWeather_city__6Su7p\",\"degree\":\"CurrentWeather_degree__312GU\",\"description\":\"CurrentWeather_description__3IT7b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"favoriteCity\":\"FavoriteCity_favoriteCity__yI4KN\",\"city\":\"FavoriteCity_city__1Mbds\",\"description\":\"FavoriteCity_description__3rU9T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Layout_root__37D3L\",\"body\":\"Layout_body__3Ei6M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WeatherDetailsContainer_container__33lpT\",\"favoritesButton\":\"WeatherDetailsContainer_favoritesButton__3xRz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autocomplete\":\"Autocomplete_autocomplete__1Uc_q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"favorites\":\"Favorites_favorites__3gODc\"};"],"sourceRoot":""}